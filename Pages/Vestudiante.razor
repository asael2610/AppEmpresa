@page "/V_estudiante"
@using AppEmpresa.Data
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory EstudianteFactory


<h1>FORMULARIO DE ESTUDIANTES</h1>

if (getEstudianteError || iEstudiantes is null)
{
    <p>.</p>
}
else
{
     <form>
        <label for="lbl_carne" class="form-label">CARNE</label>
        <input @bind="var_carne" type="text" class="form-control"  placeholder="Ejemplo: Nombre 1  Nombre 2">
        <label for="lbl_nombres" class="form-label">Nombres</label>
        <input @bind="var_nombres" type="text" class="form-control"  placeholder="Ejemplo: Nombre 1  Nombre 2">
        <label for="lbl_apellidos" class="form-label">Apellidos</label>
        <input @bind="var_apellidos" type="text" class="form-control"  placeholder="Ejemplo: Apellido 1  Apellido 2">
        <label for="lbl_direccion" class="form-label">Direccion</label>
        <input @bind="var_direccion" type="text" class="form-control"  placeholder="Ejemplo: #casa calle avenida lugar">
        <label for="lbl_telefono" class="form-label">Telefono</label>
        <input @bind="var_telefono" type="text" class="form-control"  placeholder="Ejemplo: 5555222">
        <label for="lbl_correo" class="form-label">Correo</label>
        <input @bind="var_correo" type="text" class="form-control"  placeholder="Ejemplo: 5555222">
        <label for="lbl_sangre" class="form-label">Tipos de Sangre</label>
        <input @bind="var_sangre" type="text" class="form-control"  placeholder="Ejemplo: 5555222">
        <label for="lbl_fn" class="form-label">Fecha Nacimiento</label>
        <input @bind="var_fn" type="date" class="form-control"  placeholder="YYYY-MM-dd">
        <br>
        <button type="button" @onclick="Crear" class="btn btn-info">Crear</button>
        <button type="button" @onclick = "Actualizar" class="btn btn-success">Modificar </button>
        <button type="button"  @onclick="Eliminar" class="btn btn-danger">Eliminar</button>
        
    </form>
   
   <table class="table">
    <tbody>
        <tr>
            <th></th>
            <th>Carne</th>
            <th>Nombres</th>
            <th>Apellidos</th>
            <th>Direccion</th>
            <th>Telefono</th>
            <th>Correo</th>
            <th>Tipos de Sangre</th>
            <th>Fecha Nacimiento</th>
        </tr>
    </tbody>
        @foreach (var Estudiante in iestudiante)
        {
            <tr>
            <td><button type="button" @onclick="(() => enviarParametros(Estudiante.id_estudiante,Estudiante.carne,Estudiante.Nombres,Estudiante.Apellidos,Estudiante.Direccion,Estudiante.Telefono,Estudiante.correo,Estudiante.sangre,Estudiante.fecha_nacimiento))" class="btn btn-info"><i class="oi oi-pencil"></i></button></td>
            <td>@Estudiante.carne</td>
            <td>@Estudiante.Nombres</td>
            <td>@Estudiante.Apellidos</td>
            <td>@Estudiante.Direccion</td>
            <td>@Estudiante.Telefono</td>
            <td>@Estudiante.correo</td>
            <td>@Estudiante.sangre</td>
            <td>@Estudiante.fecha_nacimiento</td>
            </tr>
        }
   </table>
}

@code {
 private string? url = "https://localhost:7019/api/Clientes";
 private Int32 var_idestudiante,var_sangre;   
 private string? var_carne,var_nombres,var_apellidos,var_direccion,var_telefono,var_correo;
 private DateTime? var_fn;
 // Enviar Parametros a variables locales
 void enviarParametros(Int32 id, string? car,string? nom,string? ape,string? dir, string? tel,string? cor, Int32 san, DateTime? f){
    var_idestudiante = id;
    var_carne = car;
    var_nombres = nom;
    var_apellidos = ape;
    var_direccion = dir;
    var_telefono = tel;
    var_correo =cor;
    var_sangre =san;
    var_fn = f;

 }
 // Crear 
    private async Task Crear()
    {
        var estudiante = EstudianteFactory.CreateClient(); 
        var addItem = new Estudiante {carne=var_carne,Nombres=var_nombres,Apellidos=var_apellidos,Direccion = var_direccion,Telefono=var_telefono,correo=var_correo,sangre=var_sangre,fecha_nacimiento=var_fn };
        await estudiante.PostAsJsonAsync(url, addItem);
        
        await OnInitializedAsync();
    }
    // Actualizar
    private async Task Actualizar()
    {
        var estudiante = EstudianteFactory.CreateClient(); 
        var addItem = new Estudiante { id_estudiante=var_idestudiante,carne=var_carne,Nombres=var_nombres,Apellidos=var_apellidos,Direccion = var_direccion,Telefono=var_telefono,correo=var_correo,sangre=var_sangre,fecha_nacimiento=var_fn };
        await estudiante.PutAsJsonAsync($"{url}/{var_idestudiante}", addItem);
        
       
        await OnInitializedAsync();
    }
    // Eliminar
     private async Task Eliminar()
    {
        var estudiante = EstudianteFactory.CreateClient(); 
        await estudiante.DeleteAsync($"{url}/{var_idestudiante}");
        //url/var_idcliente
      
        await OnInitializedAsync();
    }
    private IEnumerable<Estudiante>? iestudiante = Array.Empty<Estudiante>();
    private bool getEstudianteError;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync(){
        var request = new HttpRequestMessage(HttpMethod.Get,
            url);
        request.Headers.Add("Accept", "application/vnd.github.v3+json");
        request.Headers.Add("User-Agent", "HttpEstudianteFactory-Sample");

        var estudiante = EstudianteFactory.CreateClient(); 

        var response = await estudiante.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            iestudiante = await JsonSerializer.DeserializeAsync
                <IEnumerable<Estudiante>>(responseStream);
        }
        else
        {
            getEstudianteError = true;
        }

        shouldRender = true;
    }

    
}